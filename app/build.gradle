apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "OPENAPI_CLIENT_ID", project.properties["OPENAPI_CLIENT_ID"] ?: "\"NOT_FOUND\""
        buildConfigField "String", "NAVERMAP_CERT_ID", project.properties["NAVERMAP_CERT_ID"] ?: "\"NOT_FOUND\""
        buildConfigField "String", "GEO_CERT_ID", project.properties["GEO_CERT_ID"] ?: "\"NOT_FOUND\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    def patch = rootProject.ext.default_patch
    def code = rootProject.ext.default_code

    if(isBuild()) {
        def versionFile = file('version.properties')
        def properties = new Properties()

        if(versionFile.canRead()) {
            properties.load(new FileInputStream(versionFile))
            patch = properties['PATCH'].toInteger() + 1
            code = properties['CODE'].toInteger() + 1
        }

        properties['PATCH'] = patch.toString()
        properties['CODE'] = code.toString()
        properties.store(versionFile.newWriter(), null)
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (isBuild()) {
                def dateTimeFormat = new Date().format('yyMMdd_HHmmss')
                def serverName = variant.buildType.name == 'release' ? 'Real' : 'Test'
                def version = "${variant.versionName}(${variant.versionCode})"
                def outputName = "${projectName}${version}_${serverName}_${dateTimeFormat}.apk"
                outputFileName = new File("", outputName)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7-commons:$anko_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit_version}"
}
